/* tslint:disable */
/* eslint-disable */
/**
 * Exvs Search XB
 * Exvs Search XB用API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 機体情報
 * @export
 * @interface AirframeInfo
 */
export interface AirframeInfo {
    /**
     * 機体ID
     * @type {number}
     * @memberof AirframeInfo
     */
    'id': number;
    /**
     * 機体名
     * @type {string}
     * @memberof AirframeInfo
     */
    'name': string;
    /**
     * 機体コスト
     * @type {number}
     * @memberof AirframeInfo
     */
    'cost': number;
    /**
     * 作品タイトル名
     * @type {string}
     * @memberof AirframeInfo
     */
    'titleOfWork': string;
    /**
     * パイロット名
     * @type {string}
     * @memberof AirframeInfo
     */
    'pilot'?: string;
    /**
     * 覚醒タイプ名
     * @type {string}
     * @memberof AirframeInfo
     */
    'awakenType': string;
    /**
     * 機体耐久値
     * @type {number}
     * @memberof AirframeInfo
     */
    'hp': number;
    /**
     * 機体情報URL
     * @type {string}
     * @memberof AirframeInfo
     */
    'airframeInfoUrl': string;
    /**
     * サムネイルUrl
     * @type {string}
     * @memberof AirframeInfo
     */
    'thumbnailImageUrl': string;
}
/**
 * 機体一覧
 * @export
 * @interface GetAirframesResponse
 */
export interface GetAirframesResponse {
    /**
     * すべての機体数
     * @type {number}
     * @memberof GetAirframesResponse
     */
    'total': number;
    /**
     * 機体一覧
     * @type {Array<AirframeInfo>}
     * @memberof GetAirframesResponse
     */
    'airframes': Array<AirframeInfo>;
}

/**
 * AirframeApi - axios parameter creator
 * @export
 */
export const AirframeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 機体情報の一覧取得
         * @summary 機体情報の一覧取得
         * @param {number} offset 機体情報の取得開始位置 
         * @param {number} limit 機体情報の取得数 
         * @param {string} airframeName 機体名の検索 
         * @param {number} cost 機体コスト 
         * @param {string} titleOfWork 作品タイトル名 
         * @param {string} pilot パイロット名 
         * @param {string} awakenType 覚醒タイプ名 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAirframes: async (offset: number, limit: number, airframeName: string, cost: number, titleOfWork: string, pilot: string, awakenType: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'offset' is not null or undefined
            assertParamExists('getAirframes', 'offset', offset)
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('getAirframes', 'limit', limit)
            // verify required parameter 'airframeName' is not null or undefined
            assertParamExists('getAirframes', 'airframeName', airframeName)
            // verify required parameter 'cost' is not null or undefined
            assertParamExists('getAirframes', 'cost', cost)
            // verify required parameter 'titleOfWork' is not null or undefined
            assertParamExists('getAirframes', 'titleOfWork', titleOfWork)
            // verify required parameter 'pilot' is not null or undefined
            assertParamExists('getAirframes', 'pilot', pilot)
            // verify required parameter 'awakenType' is not null or undefined
            assertParamExists('getAirframes', 'awakenType', awakenType)
            const localVarPath = `/airframes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (airframeName !== undefined) {
                localVarQueryParameter['airframeName'] = airframeName;
            }

            if (cost !== undefined) {
                localVarQueryParameter['cost'] = cost;
            }

            if (titleOfWork !== undefined) {
                localVarQueryParameter['titleOfWork'] = titleOfWork;
            }

            if (pilot !== undefined) {
                localVarQueryParameter['pilot'] = pilot;
            }

            if (awakenType !== undefined) {
                localVarQueryParameter['awakenType'] = awakenType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AirframeApi - functional programming interface
 * @export
 */
export const AirframeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AirframeApiAxiosParamCreator(configuration)
    return {
        /**
         * 機体情報の一覧取得
         * @summary 機体情報の一覧取得
         * @param {number} offset 機体情報の取得開始位置 
         * @param {number} limit 機体情報の取得数 
         * @param {string} airframeName 機体名の検索 
         * @param {number} cost 機体コスト 
         * @param {string} titleOfWork 作品タイトル名 
         * @param {string} pilot パイロット名 
         * @param {string} awakenType 覚醒タイプ名 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAirframes(offset: number, limit: number, airframeName: string, cost: number, titleOfWork: string, pilot: string, awakenType: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAirframesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAirframes(offset, limit, airframeName, cost, titleOfWork, pilot, awakenType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AirframeApi - factory interface
 * @export
 */
export const AirframeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AirframeApiFp(configuration)
    return {
        /**
         * 機体情報の一覧取得
         * @summary 機体情報の一覧取得
         * @param {number} offset 機体情報の取得開始位置 
         * @param {number} limit 機体情報の取得数 
         * @param {string} airframeName 機体名の検索 
         * @param {number} cost 機体コスト 
         * @param {string} titleOfWork 作品タイトル名 
         * @param {string} pilot パイロット名 
         * @param {string} awakenType 覚醒タイプ名 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAirframes(offset: number, limit: number, airframeName: string, cost: number, titleOfWork: string, pilot: string, awakenType: string, options?: any): AxiosPromise<GetAirframesResponse> {
            return localVarFp.getAirframes(offset, limit, airframeName, cost, titleOfWork, pilot, awakenType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AirframeApi - object-oriented interface
 * @export
 * @class AirframeApi
 * @extends {BaseAPI}
 */
export class AirframeApi extends BaseAPI {
    /**
     * 機体情報の一覧取得
     * @summary 機体情報の一覧取得
     * @param {number} offset 機体情報の取得開始位置 
     * @param {number} limit 機体情報の取得数 
     * @param {string} airframeName 機体名の検索 
     * @param {number} cost 機体コスト 
     * @param {string} titleOfWork 作品タイトル名 
     * @param {string} pilot パイロット名 
     * @param {string} awakenType 覚醒タイプ名 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AirframeApi
     */
    public getAirframes(offset: number, limit: number, airframeName: string, cost: number, titleOfWork: string, pilot: string, awakenType: string, options?: AxiosRequestConfig) {
        return AirframeApiFp(this.configuration).getAirframes(offset, limit, airframeName, cost, titleOfWork, pilot, awakenType, options).then((request) => request(this.axios, this.basePath));
    }
}


